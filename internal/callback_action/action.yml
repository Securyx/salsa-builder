name: "Build Callback Action"
description: "Builds with SLSA attestation support"
inputs:
  slsa-workflow-inputs:
    description: "JSON object with the inputs from the TRW"
    required: true
  slsa-layout-file:
    description: "Path to the layout file for attestation generation"
    required: true
  slsa-workflow-secret1: {}
  slsa-workflow-secret2: {}
  slsa-workflow-secret3: {}
  slsa-workflow-secret4: {}
  slsa-workflow-secret5: {}
  slsa-workflow-secret6: {}
  slsa-workflow-secret7: {}
  slsa-workflow-secret8: {}
  slsa-workflow-secret9: {}
  slsa-workflow-secret10: {}
  slsa-workflow-secret11: {}
  slsa-workflow-secret12: {}
  slsa-workflow-secret13: {}
  slsa-workflow-secret14: {}
  slsa-workflow-secret15: {}

outputs:
  artifact:
    description: "Name of the artifact built"
    value: "${{ steps.build.outputs.artifact }}"
  status:
    description: "Status of the build"
    value: "${{ steps.build.outputs.status }}"
  artifact-download-name:
    description: "Name of the artifact uploaded"
    value: "${{ steps.rng.outputs.random }}-artifacts"
  artifact-download-sha256:
    description: "SHA256 of the uploaded artifacts."
    value: "${{ steps.upload.outputs.sha256 }}"

runs:
  using: "composite"
  steps:
    - name: Run main Action
      uses: ./../__TOOL_CHECKOUT_DIR__
      id: build
      with:
        task: ${{ fromJson(inputs.slsa-workflow-inputs).task }}
        artifact: ${{ fromJson(inputs.slsa-workflow-inputs).artifact }}
        apt_packages: ${{ fromJson(inputs.slsa-workflow-inputs).apt_packages }}

    - name: Generate layout file
      id: generate-layout
      env:
        SLSA_OUTPUTS_ARTIFACTS_FILE: ${{ inputs.slsa-layout-file }}
        ARTIFACT: ${{ fromJson(inputs.slsa-workflow-inputs).artifact }}
      shell: bash
      run: ./../__TOOL_ACTION_DIR__/generate-layout.sh

    - name: Create random value
      id: rng
      uses: slsa-framework/slsa-github-generator/actions/delegator/random@v1.8.0

    - name: Create folder to share
      shell: bash
      env:
        ARTIFACT: ${{ fromJson(inputs.slsa-workflow-inputs).artifact }}
      run: |
        set -euo pipefail
        
        mkdir artifacts
        mv "${ARTIFACT}" artifacts/

    - name: Share artifacts
      id: upload
      uses: slsa-framework/slsa-github-generator/actions/delegator/secure-upload-folder@4876e96b8268fd8b7b8d8574718d06c0d0426d40
      with:
        name: "${{ steps.rng.outputs.random }}-artifacts"
        path: artifacts
